#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
#ifndef APPHARBRSDK_SWIFT_H
#define APPHARBRSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AppHarbrSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
typedef SWIFT_ENUM(NSInteger, AHInitializeError, open) {
  AHInitializeErrorInvalidApiKey = 0,
  AHInitializeErrorInvalidActivation = 1,
  AHInitializeErrorUnsupportedDirectMediation = 2,
  AHInitializeErrorEnableDebugMode = 3,
  AHInitializeErrorInternalError = 4,
};
static NSString * _Nonnull const AHInitializeErrorDomain = @"AppHarbrSDK.AHInitializeError";


typedef SWIFT_ENUM(NSInteger, AdAnalyzedResult, open) {
  AdAnalyzedResultAnalyzedSuccessfullyOnAdLoad = 0,
  AdAnalyzedResultWillAnalyzeOnDisplay = 1,
  AdAnalyzedResultNotAnalyzedUnableToFetchAdapter = 2,
  AdAnalyzedResultNotAnalyzedAdNetworkAdapterNotSupported = 3,
  AdAnalyzedResultNotAnalyzedUnsupportedContent = 4,
  AdAnalyzedResultNotAnalyzedHouseCampaign = 5,
  AdAnalyzedResultNotAnalyzedDueToTargetedAdNetworks = 6,
};

typedef SWIFT_ENUM(NSInteger, AdBlockReason, open) {
  AdBlockReasonSecurity = 1,
  AdBlockReasonVideoOnDisplay = 2,
  AdBlockReasonPopup = 3,
  AdBlockReasonAdLpOffensive = 4,
  AdBlockReasonVideoAutoSound = 5,
  AdBlockReasonLpBackButtonHijack = 6,
  AdBlockReasonBrowserLocking = 7,
  AdBlockReasonPageAutoScroll = 8,
  AdBlockReasonMobileVibrateLp = 9,
  AdBlockReasonJSAlertOnEntry = 10,
  AdBlockReasonUserDefinedDomain = 11,
  AdBlockReasonAdLpExtremeOffensive = 12,
  AdBlockReasonLpCategoryAlcohol = 14,
  AdBlockReasonLpCategoryGambling = 15,
  AdBlockReasonLpCategoryHealth = 16,
  AdBlockReasonLpCategoryIllegalDrugs = 17,
  AdBlockReasonLpCategoryLaw = 18,
  AdBlockReasonLpCategoryMarijuana = 19,
  AdBlockReasonLpCategoryNews = 20,
  AdBlockReasonLpCategoryPharmaceuticals = 21,
  AdBlockReasonLpCategoryReligion = 22,
  AdBlockReasonLpCategoryTobacco = 23,
  AdBlockReasonLpCategoryWeightLoss = 24,
  AdBlockReasonAdLpKeyword = 25,
  AdBlockReasonLpCategoryCryptocurrency = 26,
  AdBlockReasonLpCategoryFashionAndBeauty = 27,
  AdBlockReasonLpCategoryElection = 28,
  AdBlockReasonUserDefinedApp = 31,
  AdBlockReasonAnimatedGif = 32,
  AdBlockReasonMarkedByTheUser = 515,
  AdBlockReasonLpCategorySwimwearAndIntimateApparel = 34,
  AdBlockReasonLpCategoryWeapons = 35,
  AdBlockReasonFileDownload = 36,
  AdBlockReasonInvalidTraffic = 37,
  AdBlockReasonAppStoreCategoryBooks = 100,
  AdBlockReasonAppStoreCategoryBusiness = 101,
  AdBlockReasonAppStoreCategoryDeveloperTools = 102,
  AdBlockReasonAppStoreCategoryEducation = 103,
  AdBlockReasonAppStoreCategoryEntertainment = 104,
  AdBlockReasonAppStoreCategoryFinance = 105,
  AdBlockReasonAppStoreCategoryFoodDrink = 106,
  AdBlockReasonAppStoreCategoryGames = 107,
  AdBlockReasonAppStoreCategoryGraphicsDesign = 108,
  AdBlockReasonAppStoreCategoryHealthFitness = 109,
  AdBlockReasonAppStoreCategoryLifestyle = 110,
  AdBlockReasonAppStoreCategoryKids = 111,
  AdBlockReasonAppStoreCategoryMagazinesNewspapers = 112,
  AdBlockReasonAppStoreCategoryMedical = 113,
  AdBlockReasonAppStoreCategoryMusic = 114,
  AdBlockReasonAppStoreCategoryNavigation = 115,
  AdBlockReasonAppStoreCategoryNews = 116,
  AdBlockReasonAppStoreCategoryPhotoVideo = 117,
  AdBlockReasonAppStoreCategoryProductivity = 118,
  AdBlockReasonAppStoreCategoryReference = 119,
  AdBlockReasonAppStoreCategorySafariExtensions = 120,
  AdBlockReasonAppStoreCategoryShopping = 121,
  AdBlockReasonAppStoreCategorySocialNetworking = 122,
  AdBlockReasonAppStoreCategorySports = 123,
  AdBlockReasonAppStoreCategoryTravel = 124,
  AdBlockReasonAppStoreCategoryUtilities = 125,
  AdBlockReasonAppStoreCategoryWeather = 126,
  AdBlockReasonAppStoreCategoryStickers = 127,
  AdBlockReasonPlayStoreCategoryArtDesign = 200,
  AdBlockReasonPlayStoreCategoryAutoVehicles = 201,
  AdBlockReasonPlayStoreCategoryBeauty = 202,
  AdBlockReasonPlayStoreCategoryBooksReference = 203,
  AdBlockReasonPlayStoreCategoryBusiness = 204,
  AdBlockReasonPlayStoreCategoryComics = 205,
  AdBlockReasonPlayStoreCategoryCommunication = 206,
  AdBlockReasonPlayStoreCategoryDating = 207,
  AdBlockReasonPlayStoreCategoryEducation = 208,
  AdBlockReasonPlayStoreCategoryEntertainment = 209,
  AdBlockReasonPlayStoreCategoryEvents = 210,
  AdBlockReasonPlayStoreCategoryFinance = 211,
  AdBlockReasonPlayStoreCategoryFoodDrink = 212,
  AdBlockReasonPlayStoreCategoryHealthFitness = 213,
  AdBlockReasonPlayStoreCategoryHouseHome = 214,
  AdBlockReasonPlayStoreCategoryLibrariesDemo = 215,
  AdBlockReasonPlayStoreCategoryLifestyle = 216,
  AdBlockReasonPlayStoreCategoryMapsNavigation = 217,
  AdBlockReasonPlayStoreCategoryMedical = 218,
  AdBlockReasonPlayStoreCategoryMusicAudio = 219,
  AdBlockReasonPlayStoreCategoryNewsMagazines = 220,
  AdBlockReasonPlayStoreCategoryParenting = 221,
  AdBlockReasonPlayStoreCategoryPersonalization = 222,
  AdBlockReasonPlayStoreCategoryPhotography = 223,
  AdBlockReasonPlayStoreCategoryProductivity = 224,
  AdBlockReasonPlayStoreCategoryShopping = 225,
  AdBlockReasonPlayStoreCategorySocial = 226,
  AdBlockReasonPlayStoreCategorySports = 227,
  AdBlockReasonPlayStoreCategoryTools = 228,
  AdBlockReasonPlayStoreCategoryTravelLocal = 229,
  AdBlockReasonPlayStoreCategoryVideoPlayersEditors = 230,
  AdBlockReasonPlayStoreCategoryWeather = 231,
  AdBlockReasonPlayStoreCategoryGamesAction = 232,
  AdBlockReasonPlayStoreCategoryGamesAdventure = 233,
  AdBlockReasonPlayStoreCategoryGamesArcade = 234,
  AdBlockReasonPlayStoreCategoryGamesBoard = 235,
  AdBlockReasonPlayStoreCategoryGamesCard = 236,
  AdBlockReasonPlayStoreCategoryGamesCasino = 237,
  AdBlockReasonPlayStoreCategoryGamesCasual = 238,
  AdBlockReasonPlayStoreCategoryGamesEducational = 239,
  AdBlockReasonPlayStoreCategoryGamesMusic = 240,
  AdBlockReasonPlayStoreCategoryGamesPuzzle = 241,
  AdBlockReasonPlayStoreCategoryGamesRacing = 242,
  AdBlockReasonPlayStoreCategoryGamesRolePlaying = 243,
  AdBlockReasonPlayStoreCategoryGamesSimulation = 244,
  AdBlockReasonPlayStoreCategoryGamesSports = 245,
  AdBlockReasonPlayStoreCategoryGamesStrategy = 246,
  AdBlockReasonPlayStoreCategoryGamesTrivia = 247,
  AdBlockReasonPlayStoreCategoryGamesWord = 248,
  AdBlockReasonAppExperienceForceCloseAd = 901,
  AdBlockReasonNone = 9998,
  AdBlockReasonUnknown = 9999,
};

typedef SWIFT_ENUM_NAMED(NSInteger, AHAdFormat, "AdFormat", open) {
  AHAdFormatBanner = 1,
  AHAdFormatInterstitial = 2,
  AHAdFormatNative = 3,
  AHAdFormatRewarded = 4,
  AHAdFormatRewardedInterstitial = 5,
};

typedef SWIFT_ENUM(NSInteger, AdQualityError, open) {
  AdQualityErrorTimeout = 0,
  AdQualityErrorAdValidatedOnDisplay = 1,
  AdQualityErrorAdapterVersionMismatch = 2,
  AdQualityErrorUnsupportedAdNetwork = 3,
};
static NSString * _Nonnull const AdQualityErrorDomain = @"AppHarbrSDK.AdQualityError";

enum AdStateResult : NSInteger;

SWIFT_CLASS("_TtC11AppHarbrSDK8AdResult")
@interface AdResult : NSObject
@property (nonatomic, readonly) enum AdStateResult adStateResult;
@property (nonatomic, readonly) enum AdBlockReason reason SWIFT_DEPRECATED_MSG("Use the reasons instead.");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, AdSdk, open) {
  AdSdkAdColony = 5,
  AdSdkAdFalcon = 6,
  AdSdkAdGeneration = 38,
  AdSdkAdMob = 1,
  AdSdkAdMost = 7,
  AdSdkAequus = 8,
  AdSdkAlgorix = 72,
  AdSdkAppLovin = 9,
  AdSdkAppodeal = 39,
  AdSdkAmazon = 40,
  AdSdkAutomattic = 70,
  AdSdkBeachfront = 73,
  AdSdkBeeswax = 74,
  AdSdkBidMachine = 41,
  AdSdkBigoAds = 71,
  AdSdkChartboost = 10,
  AdSdkChocolatePlatform = 42,
  AdSdkColossus = 75,
  AdSdkConversant = 76,
  AdSdkCriteo = 43,
  AdSdkCrossPromotion = 11,
  AdSdkCsj = 90,
  AdSdkDatablocks = 77,
  AdSdkEmodo = 78,
  AdSdkEmx = 45,
  AdSdkEquativ = 46,
  AdSdkFacebook = 4,
  AdSdkFluct = 47,
  AdSdkFlurry = 12,
  AdSdkFyber = 13,
  AdSdkGam = 2,
  AdSdkGroundtruth = 79,
  AdSdkHyprmx = 14,
  AdSdkIMobile = 15,
  AdSdkImproveDigital = 48,
  AdSdkInMobi = 16,
  AdSdkIndex = 49,
  AdSdkIronSource = 17,
  AdSdkLeadBolt = 18,
  AdSdkLgUAD = 50,
  AdSdkLine = 51,
  AdSdkMaio = 19,
  AdSdkMax = 20,
  AdSdkMediagrid = 80,
  AdSdkMediaNet = 52,
  AdSdkMeson = 36,
  AdSdkMintegral = 37,
  AdSdkMobFox = 21,
  AdSdkMobileFuse = 53,
  AdSdkMoloco = 89,
  AdSdkMyTarget = 22,
  AdSdkNend = 23,
  AdSdkNimbus = 69,
  AdSdkOneTag = 54,
  AdSdkOpenX = 55,
  AdSdkOpenWrapDFP = 88,
  AdSdkOgury = 56,
  AdSdkPangle = 24,
  AdSdkPubMatic = 57,
  AdSdkPubnative = 81,
  AdSdkPrebid = 68,
  AdSdkReklamup = 91,
  AdSdkRhythmone = 82,
  AdSdkRubicon = 58,
  AdSdkShareThrough = 59,
  AdSdkSilvermob = 83,
  AdSdkSmaato = 25,
  AdSdkSonobi = 60,
  AdSdkScaleMonk = 26,
  AdSdkSnap = 27,
  AdSdkXandr = 87,
  AdSdkXMediator = 44,
  AdSdkTapDaq = 28,
  AdSdkTapJoy = 29,
  AdSdkTappx = 84,
  AdSdkTencent = 30,
  AdSdkTripleLift = 61,
  AdSdkUndertone = 85,
  AdSdkUnity = 31,
  AdSdkUnrulyX = 62,
  AdSdkVerizon = 32,
  AdSdkVerve = 63,
  AdSdkVpon = 33,
  AdSdkVrtcal = 86,
  AdSdkVungle = 34,
  AdSdkYahoo = 64,
  AdSdkYandex = 65,
  AdSdkYieldMo = 66,
  AdSdkYieldOne = 67,
  AdSdkZucks = 35,
  AdSdkCustom = 998,
  AdSdkNone = 999,
};

typedef SWIFT_ENUM(NSInteger, AdStateResult, open) {
  AdStateResultUnknown = 0,
  AdStateResultVerified = 1,
  AdStateResultBlocked = 2,
  AdStateResultReported = 3,
};

@class AppHarbrConfiguration;
@protocol AppHarbrDelegate;
@class NSString;

SWIFT_CLASS("_TtC11AppHarbrSDK8AppHarbr")
@interface AppHarbr : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AppHarbr * _Nonnull shared;)
+ (AppHarbr * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@property (nonatomic, readonly, strong) AppHarbrConfiguration * _Nullable geConfiguration;
/// Initializes the AppHarbr SDK with the specified configuration and completion closure.
/// \param configuration The configuration object containing the publisher API key.
///
/// \param completion A closure to be executed once the initialization is complete, whether it succeeds or fails. If the
/// initialization is successful, the error parameter will be <code>nil</code>. If there is an error, the error
/// parameter will contain a description of the error.
///
- (void)initializeSdkWithConfiguration:(AppHarbrConfiguration * _Nonnull)configuration completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// Adds a banner ad for monitoring with the specified ad SDK, ad object, and delegate.
/// \param adSdk The ad network SDK associated with the banner ad.
///
/// \param adObject The object representing the banner ad.
///
/// \param delegate The publisher delegate in order to notify about block/report.
///
- (void)addBannerAdSdk:(enum AdSdk)adSdk adObject:(NSObject * _Nonnull)adObject delegate:(id <AppHarbrDelegate> _Nonnull)delegate;
/// Use it for banner ads loaded via GADAdLoader
/// \param adSdk The ad network SDK associated with the native ad.
///
/// \param adLoader GADAdLoader object
///
/// \param delegate The publisher delegate in order to notify about block/report.
///
- (void)addNativeBannerAdSdk:(enum AdSdk)adSdk adLoader:(NSObject * _Nonnull)adLoader delegate:(id <AppHarbrDelegate> _Nonnull)delegate;
/// Adds a interstitial ad for monitoring
/// \param adSdk The ad network SDK associated with the interstitial ad.
///
/// \param interstitialAd Optional interstitial ad object
///
/// \param unitId The mediation adUnit ID of the interstitial ad.
///
/// \param delegate The publisher delegate in order to notify about block/report.
///
- (void)addInterstitialAdSdk:(enum AdSdk)adSdk interstitialAd:(NSObject * _Nullable)interstitialAd unitId:(NSString * _Nullable)unitId delegate:(id <AppHarbrDelegate> _Nonnull)delegate;
/// Adds a rewarded ad for monitoring
/// \param adSdk The ad network SDK associated with the rewarded ad.
///
/// \param rewardedAd Optional rewarded ad object
///
/// \param unitId The mediation adUnit of the rewarded ad.
///
/// \param delegate The publisher delegate in order to notify about block/report.
///
- (void)addRewardedAdSdk:(enum AdSdk)adSdk rewardedAd:(NSObject * _Nullable)rewardedAd unitId:(NSString * _Nullable)unitId delegate:(id <AppHarbrDelegate> _Nonnull)delegate;
/// Adds a rewarded interstitial ad for monitoring
/// \param adSdk The ad network SDK associated with the rewarded interstitial ad.
///
/// \param rewardedIntertitialAd Optional rewarded interstitial ad object
///
/// \param unitId The mediation adUnit of the rewarded interstitial ad.
///
/// \param delegate The publisher delegate in order to notify about block/report.
///
- (void)addRewardedInterstitialAdSdk:(enum AdSdk)adSdk rewardedAd:(NSObject * _Nullable)rewardedIntertitialAd unitId:(NSString * _Nullable)unitId delegate:(id <AppHarbrDelegate> _Nonnull)delegate;
/// Determines whether a native ad should be blocked.
/// note:
///
/// <ul>
///   <li>
///     The unitId parameter is optional, but it’s recommended to be provided
///   </li>
/// </ul>
/// \param nativeAd The native ad object.
///
/// \param adSdk The ad network SDK used to create the native ad.
///
/// \param unitId The mediation adUnit of the native ad.
///
/// \param request <code>GADRequest</code> Required for Prebid AdMob native ad
///
///
/// returns:
/// An enumeration case of <code>AdResult</code> indicating whether the ad should be blocked or not.
- (AdResult * _Nonnull)shouldBlockNativeAd:(NSObject * _Nonnull)nativeAd usingAdSdk:(enum AdSdk)adSdk unitId:(NSString * _Nonnull)unitId request:(NSObject * _Nullable)request SWIFT_WARN_UNUSED_RESULT;
/// Use it to monitor ads loaded inside of MATableViewAdPlacer or MACollectionViewAdPlacer.
/// \param adUnitIdentifier The ad unit identifier for monitoring native ads
///
- (void)addMAAdPlacerAdUnitIdentifier:(NSString * _Nonnull)adUnitIdentifier;
/// Stop monitoring MATableViewAdPlacer or MACollectionViewAdPlacer ads.
/// \param adUnitIdentifier The ad unit identifier for monitoring native ads
///
- (void)removeMAAdPlacerAdUnitIdentifier:(NSString * _Nonnull)adUnitIdentifier;
- (enum AdStateResult)getInterstitialStateWithAd:(NSObject * _Nullable)ad SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("This method is deprecated. Please, use interstitialResult(forAd:) method instead.");
- (enum AdStateResult)getRewardedStateWithAd:(NSObject * _Nullable)ad SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("This method is deprecated. Please, use rewardedResult(forAd:) method instead.");
- (enum AdStateResult)getRewardedInterstitialStateWithAd:(NSObject * _Nullable)ad SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("This method is deprecated. Please, use rewardedInterstitialResult(forAd:) method instead.");
- (AdResult * _Nonnull)interstitialResultForAd:(NSObject * _Nullable)ad SWIFT_WARN_UNUSED_RESULT;
- (AdResult * _Nonnull)rewardedResultForAd:(NSObject * _Nullable)ad SWIFT_WARN_UNUSED_RESULT;
- (AdResult * _Nonnull)rewardedInterstitialResultForAd:(NSObject * _Nullable)ad SWIFT_WARN_UNUSED_RESULT;
- (void)removeBannerWithView:(NSObject * _Nonnull)adObject SWIFT_DEPRECATED_MSG("you do not need to remove object");
- (void)removeNativeBannerWithAdLoader:(NSObject * _Nonnull)adLoader SWIFT_DEPRECATED_MSG("you do not need to remove object");
- (void)removeInterstitialWithAd:(NSObject * _Nullable)ad SWIFT_DEPRECATED_MSG("you do not need to remove object");
- (void)removeRewardedWithAd:(NSObject * _Nullable)ad SWIFT_DEPRECATED_MSG("you do not need to remove object");
@end


SWIFT_PROTOCOL("_TtP11AppHarbrSDK16AppHarbrDelegate_")
@protocol AppHarbrDelegate
/// Notifies the delegate when an ad is blocked by the SDK.
/// note:
/// This method is invoked when the SDK detects that an ad has been blocked.
/// You can use the information provided in the parameters to take appropriate actions.
/// \param ad The ad that was blocked. Can be nil if the ad object is not available.
///
/// \param unitId The ad unit ID of the blocked ad.
///
/// \param adFormat The format of the blocked ad (e.g., banner, interstitial).
///
/// \param reasons An array of reasons describing why the ad was blocked.
///
- (void)didAdBlockedWithAd:(NSObject * _Nullable)ad unitId:(NSString * _Nullable)unitId adForamt:(enum AHAdFormat)adForamt reasons:(NSArray<NSString *> * _Nonnull)reasons;
@end


SWIFT_PROTOCOL("_TtP11AppHarbrSDK25AppHarbrAdAnalyzeDelegate_")
@protocol AppHarbrAdAnalyzeDelegate <AppHarbrDelegate>
/// Notifies the delegate when ad is analyzed by the SDK.
/// note:
/// This method is invoked when the SDK analyzes data available during ad load. It will not be called if the ad is blocked by the SDK or if it is a fullscreen ad that has already been displayed to the user.
/// You can leverage the information provided in the parameters to take appropriate actions based on the analysis results.
/// \param ad The ad that was analyzed. Can be nil if the ad object is not available.
///
/// \param adNetwork The ad network associated with the ad.
///
/// \param unitId The ad unit ID of the analyzed ad.
///
/// \param adFormat The format of the analyzed ad (e.g., banner, interstitial).
///
/// \param result The result of the ad analysis represented by <code>AdAnalyzedResult</code>.
///
- (void)didAdAnalyzedWithAd:(NSObject * _Nullable)ad adNetwork:(enum AdSdk)adNetwork unitId:(NSString * _Nullable)unitId adFormat:(enum AHAdFormat)adFormat result:(enum AdAnalyzedResult)result;
@end

@protocol AppHarbrAdQualityDelegate;
enum VerificationStatus : NSInteger;

SWIFT_CLASS("_TtC11AppHarbrSDK17AppHarbrAdQuality")
@interface AppHarbrAdQuality : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AppHarbrAdQuality * _Nonnull shared;)
+ (AppHarbrAdQuality * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initializes the AppHarbr SDK asynchronously.
/// This method asynchronously initializes the AppHarbr SDK with the specified API key, direct mediation SDK, and configuration options. You can use the <code>configuration</code> parameter to pass additional
/// configuration options to the SDK, such as mute setting, verifyAd call timeout.
/// When initialization is complete, the <code>completion</code> block is called with an <code>Error</code> object if there was an error, or <code>nil</code> if initialization was successful.
/// \param apiKey A <code>String</code> representing the AppHarbr API key for your app.
///
/// \param directMediationSdk The direct mediation SDK
///
/// \param configuration An optional dictionary of configuration options for the AppHarbr SDK.
///
/// \param completion A completion block that will be called when initialization has completed. The block takes an optional <code>Error</code> object that contains information about any errors that occurred during initialization. If initialization was successful, the error parameter is <code>nil</code>.
///
- (void)initializeSdkWithApiKey:(NSString * _Nonnull)apiKey directMediationSdk:(enum AdSdk)directMediationSdk configuration:(NSDictionary<NSString *, id> * _Nullable)configuration completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// Verifies the quality of an ad.
/// Call this method as soon as an ad is loaded to ensure its quality. The method scans the ad and returns the result via its delegate.
/// \param adObject The ad object to verify. If the mediated ad object is not available, pass the mediation ad object instead.
///
/// \param adFormat The format of the ad. Pass a value of the <code>AdFormat</code> enum.
///
/// \param adContent Optional ad content, such as JSON, VAST, or HTML.
///
/// \param adNetworkSdk The ad network SDK. Pass a value of the <code>AdSdk</code> enum.
///
/// \param mediationUnitId Optional mediation ad unit id.
///
/// \param adNetworkUnitId Optional ad unit Id of the loaded ad.
///
/// \param mediationCID Optional mediation creative Id
///
/// \param adNetworkCID Option ad network creative id
///
/// \param extraData Optional extra data to provide additional information about the ad.
///
/// \param delegate Optional delegate to listen for ad quality events.
///
///
/// returns:
/// A <code>VerificationStatus</code> enum value indicating whether the caller should wait for the verification process to complete or not.
- (enum VerificationStatus)verifyAdWithAdObject:(NSObject * _Nonnull)adObject adFormat:(enum AHAdFormat)adFormat adContent:(NSString * _Nullable)adContent adNetworkSdk:(enum AdSdk)adNetworkSdk mediationUnitId:(id _Nullable)mediationUnitId adNetworkUnitId:(id _Nullable)adNetworkUnitId mediationCID:(NSString * _Nullable)mediationCID adNetworkCID:(NSString * _Nullable)adNetworkCID extraData:(NSDictionary<NSString *, id> * _Nullable)extraData delegate:(id <AppHarbrAdQualityDelegate> _Nullable)delegate;
/// Invokes this method before presenting or displaying an ad.
/// This method should be called to inform the AppHarbor SDK that an ad will be displayed (before WillPresentScreen/WillDisplay).
/// \param adObject The ad object passed in the <code>verifyAd</code> call.
///
/// \param adFormat The format of the ad. Pass a value of the <code>AdFormat</code> enum.
///
/// \param adContent Optional ad content, such as JSON, VAST, or HTML.
///
/// \param adNetworkSdk The ad network SDK. You should pass a value of the <code>AdSdk</code> enum.
///
/// \param mediationUnitId Optional mediation ad unit id.
///
/// \param adNetworkUnitId Optional ad unit Id of loaded ad.
///
/// \param mediationCID Optional mediation creative Id
///
/// \param adNetworkCID Option ad network creative id
///
/// \param extraData Optional extra data
///
- (void)willDisplayAdWithAdObject:(NSObject * _Nonnull)adObject adFormat:(enum AHAdFormat)adFormat adContent:(NSString * _Nullable)adContent adNetworkSdk:(enum AdSdk)adNetworkSdk mediationUnitId:(id _Nullable)mediationUnitId adNetworkUnitId:(id _Nullable)adNetworkUnitId mediationCID:(NSString * _Nullable)mediationCID adNetworkCID:(NSString * _Nullable)adNetworkCID extraData:(NSDictionary<NSString *, id> * _Nullable)extraData;
/// This method should be called to inform the AppHarbr SDK that an ad will be closed
/// \param adObject The ad object passed in the <code>verifyAd</code> call
///
- (void)willCloseAdWithAdObject:(NSObject * _Nonnull)adObject;
/// This method should be called to inform the AppHarbr SDK that an ad has been clicked
/// \param adObject The ad object passed in the <code>verifyAd</code> call
///
- (void)didClickAdWithAdObject:(NSObject * _Nonnull)adObject;
/// This is optional call, once you remove the ad object , AppHarbrSDK stop monitoring it.
/// \param adObject The ad object passed in the <code>verifyAd</code> call.
///
- (void)removeAdWithAdObject:(NSObject * _Nonnull)adObject;
/// Check if the AppHarbrSDK is ready to scan / verify an ad.
@property (nonatomic, readonly) BOOL isReady;
@end


/// A delegate protocol designed exclusively for custom mediations with AppHarbr, providing a mechanism for receiving updates and managing ad quality.
SWIFT_PROTOCOL("_TtP11AppHarbrSDK25AppHarbrAdQualityDelegate_")
@protocol AppHarbrAdQualityDelegate
/// Called when the ad should be blocked or reported.
/// \param adObject Scanned ad object reference.
///
/// \param adFormat The ad format.
///
/// \param blockReasons Blocked reason string array
///
/// \param reportReasons Reported reason string array
///
/// \param creativeId The ad network creative id.
///
/// \param adNetworkSdk The mediated ad network sdk.
///
/// \param timestamp The time at which this ad was blocked, as a <code>TimeInterval</code>.
///
- (void)didAdIncidentWithAd:(NSObject * _Nonnull)ad adFormat:(enum AHAdFormat)adFormat blockReasons:(NSArray<NSString *> * _Nonnull)blockReasons reportReasons:(NSArray<NSString *> * _Nonnull)reportReasons creativeId:(NSString * _Nonnull)creativeId adNetworkSdk:(enum AdSdk)adNetworkSdk unitId:(NSString * _Nonnull)unitId timestamp:(NSTimeInterval)timestamp;
/// Called when the ad should be blocked or reported after display.
/// \param adObject Scanned ad object reference.
///
/// \param adFormat The ad format.
///
/// \param blockReasons Blocked reason string array
///
/// \param reportReasons Reported reason string array
///
/// \param creativeId The ad network creative id.
///
/// \param adNetworkSdk The mediated ad network sdk.
///
/// \param timestamp The time at which this ad was blocked, as a <code>TimeInterval</code>.
///
- (void)didAdIncidentOnDisplayWithAd:(NSObject * _Nonnull)ad adFormat:(enum AHAdFormat)adFormat blockReasons:(NSArray<NSString *> * _Nonnull)blockReasons reportReasons:(NSArray<NSString *> * _Nonnull)reportReasons creativeId:(NSString * _Nonnull)creativeId adNetworkSdk:(enum AdSdk)adNetworkSdk unitId:(NSString * _Nonnull)unitId timestamp:(NSTimeInterval)timestamp;
/// Called when an ad is successfully verified.
/// This delegate method is triggered when the SDK successfully verifies an ad’s quality. Note that for HTML-based ads, you will either receive <code>didAdBlocked</code>, <code>didAdBlockedOnDisplay</code>, or <code>didAdNotVerified</code> with a timeout error, since HTML ads continue to load resources.
/// \param adObject Scanned ad object reference.
///
/// \param adFormat The ad format.
///
/// \param adNetworkSdk The mediated ad network sdk.
///
/// \param timestamp The time at which the ad was verified, as a <code>TimeInterval</code>.
///
- (void)didAdVerifiedWithAd:(NSObject * _Nonnull)ad adFormat:(enum AHAdFormat)adFormat adNetworkSdk:(enum AdSdk)adNetworkSdk timestamp:(NSTimeInterval)timestamp;
/// Called when the ad is not verified within the specified time or for unsupported adNetworkSdk
/// You will receive this delegate call if the ad is not verified in the specified time mentioned in the initialization of AppHarbrSDK or for an unsupported adNetworkSdk. After receiving this delegate call, you should forward the ad to the publisher. AppHarbrSDK will continue to monitor the ad and send appropriate delegate callbacks. Please refer <code>Delegate flow</code> table in documentation for more details.
/// \param adObject Scanned ad object reference.
///
/// \param adFormat The ad format.
///
/// \param error The error describing the ad not verified state.
///
/// \param adNetworkSdk The mediated ad network sdk.
///
/// \param timestamp The time at which this ad was not verified, as a <code>TimeInterval</code>.
///
- (void)didAdNotVerifiedWithAd:(NSObject * _Nonnull)ad adFormat:(enum AHAdFormat)adFormat error:(NSError * _Nonnull)error adNetworkSdk:(enum AdSdk)adNetworkSdk timestamp:(NSTimeInterval)timestamp;
@end


SWIFT_CLASS("_TtC11AppHarbrSDK21AppHarbrConfiguration")
@interface AppHarbrConfiguration : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AppHarbrSdkDebug;

SWIFT_CLASS("_TtC11AppHarbrSDK28AppHarbrConfigurationBuilder")
@interface AppHarbrConfigurationBuilder : NSObject
- (nonnull instancetype)initWithApiKey:(NSString * _Nonnull)apiKey OBJC_DESIGNATED_INITIALIZER;
/// \param adNetwork An <code>AdSdk</code> representing the ad network you want to add to the list.
///
///
/// returns:
/// An instance of <code>AppHarbrConfigurationBuilder</code> with the updated list of ad networks to monitor.
- (AppHarbrConfigurationBuilder * _Nonnull)appendTargetedAdNetworksWith:(enum AdSdk)adNetwork SWIFT_WARN_UNUSED_RESULT;
/// This method allows you to configure whether or not the AppHarbrSDK should mute ad audio when ads are displayed.
/// By default, the SDK does not mute ad audio. If you wish to mute ad audio, you can call this method with a <code>true</code>
/// value.
/// \param muted A <code>Bool</code> value representing whether or not ad audio should be muted.
///
///
/// returns:
/// An instance of <code>AppHarbrConfigurationBuilder</code> with the updated audio mute setting.
- (AppHarbrConfigurationBuilder * _Nonnull)withMuteAd:(BOOL)muted SWIFT_WARN_UNUSED_RESULT;
/// This method allows you to configure a time limit for interstitial ads that are displayed.
/// If you wish to limit the duration of interstitial ads, you can call this method with a time interval value (in seconds). The SDK will then automatically close full-screen ads
/// after the specified duration has elapsed. If the specified duration is less than a reasonable number of seconds, the SDK will use a default time limit instead.
/// \param seconds A <code>TimeInterval</code> value representing the maximum duration (in seconds) that a interstitial ad can be displayed for. If you pass a value of <code>0</code> or a negative value, the SDK will not enforce any time limit on interstitial ads.
///
///
/// returns:
/// An instance of <code>AppHarbrConfigurationBuilder</code> with the updated interstitial ad time limit setting.
- (AppHarbrConfigurationBuilder * _Nonnull)withInterstitialAdTimeLimit:(NSTimeInterval)seconds SWIFT_WARN_UNUSED_RESULT;
/// This method allows you to configure a time limit for rewarded ads that are displayed.
/// If you wish to limit the duration of rewarded ads, you can call this method with a time interval value (in seconds). The SDK will then automatically close full-screen ads
/// after the specified duration has elapsed. If the specified duration is less than a reasonable number of seconds, the SDK will use a default time limit instead.
/// \param seconds A <code>TimeInterval</code> value representing the maximum duration (in seconds) that a rewarded ad can be displayed for. If you pass a value of <code>0</code> or a negative value, the SDK will not enforce any time limit on interstitial ads.
///
///
/// returns:
/// An instance of <code>AppHarbrConfigurationBuilder</code> with the updated rewarded ad time limit setting.
- (AppHarbrConfigurationBuilder * _Nonnull)withRewardedAdTimeLimit:(NSTimeInterval)seconds SWIFT_WARN_UNUSED_RESULT;
- (AppHarbrConfigurationBuilder * _Nonnull)withIgnoreHouseCampaignCreativeIdsUsing:(NSSet<NSString *> * _Nonnull)creativeIds SWIFT_WARN_UNUSED_RESULT;
- (AppHarbrConfigurationBuilder * _Nonnull)withDebugConfig:(AppHarbrSdkDebug * _Nonnull)debugConfig SWIFT_WARN_UNUSED_RESULT;
/// Return immutable AppHarbrConfiguration instance
- (AppHarbrConfiguration * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11AppHarbrSDK25AppHarbrConfigurationKeys")
@interface AppHarbrConfigurationKeys : NSObject
/// This key is used inside the AppHarbrSDK initialization configuration to set the timeout for the <code>verifyAd</code> call. If the ad is not verified within the specified timeout, the AppHarbrSDK will send <code>didAdNotVerified</code> with a timeout error, but it will continue to monitor the ad. This key was added to ensure that the mediation does not wait for an excessively long time before forwarding the ad to the publisher.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull timeOut;)
+ (NSString * _Nonnull)timeOut SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull enableBlockAll;)
+ (NSString * _Nonnull)enableBlockAll SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull enableReportAll;)
+ (NSString * _Nonnull)enableReportAll SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull blockDomains;)
+ (NSString * _Nonnull)blockDomains SWIFT_WARN_UNUSED_RESULT;
/// This key is used in the AppHarbrSDK initialization configuration to enable muting of interstitial ad audio.
/// To mute the ad audio for interstitial ads, set the value of this key to <code>true</code>. By default, the AppHarbrSDK does not mute the ad audio.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull muteAd;)
+ (NSString * _Nonnull)muteAd SWIFT_WARN_UNUSED_RESULT;
/// Use this constant to set a time interval value (in seconds) and limit the duration of interstitial ads. The SDK will automatically close interstitial ads
/// after the specified duration has elapsed. If the specified duration is less than a reasonable number of seconds, the SDK will use a default time limit instead.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull interstitialAdTimeLimit;)
+ (NSString * _Nonnull)interstitialAdTimeLimit SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull debug;)
+ (NSString * _Nonnull)debug SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC11AppHarbrSDK21AppHarbrExtraDataKeys")
@interface AppHarbrExtraDataKeys : NSObject
/// The key for the width value in the extra data. The value should be of type <code>Int</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull width;)
+ (NSString * _Nonnull)width SWIFT_WARN_UNUSED_RESULT;
/// The key for the height value in the extra data. The value should be of type <code>Int</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull height;)
+ (NSString * _Nonnull)height SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP11AppHarbrSDK24AppHarbrIncidentDelegate_")
@protocol AppHarbrIncidentDelegate <AppHarbrDelegate>
/// Notifies the delegate when an ad is blocked or reported by the SDK.
/// note:
/// Use the information provided in the parameters to gain insights into ad incidents, such as blocking or reporting.
/// \param ad The ad that was blocked or reported. Can be nil if the ad object is not available.
///
/// \param adNetwork The ad network associated with the ad.
///
/// \param creativeId The creative ID of the ad, if available.
///
/// \param unitId The ad unit ID of the ad.
///
/// \param adFormat The format of the ad (e.g., banner, interstitial).
///
/// \param blockReasons An array of reasons describing why the ad was blocked.
///
/// \param reportReasons An array of reasons describing why the ad was reported.
///
- (void)didAdIncidentWithAd:(NSObject * _Nullable)ad adNetwork:(enum AdSdk)adNetwork creativeId:(NSString * _Nullable)creativeId unitId:(NSString * _Nullable)unitId adForamt:(enum AHAdFormat)adForamt blockReasons:(NSArray<NSString *> * _Nonnull)blockReasons reportReasons:(NSArray<NSString *> * _Nonnull)reportReasons;
@end


SWIFT_CLASS("_TtC11AppHarbrSDK16AppHarbrSdkDebug")
@interface AppHarbrSdkDebug : NSObject
/// Debug mode for AppHarbr SDK
/// \param debug when this flag is true, the SDK will move to debug mode
/// using the set of other parameters
///
/// \param blockAll Will block all domains for testing, it will happen
/// only if debug flag is also true
///
- (nonnull instancetype)initWithDebug:(BOOL)debug blockAll:(BOOL)blockAll reportAll:(BOOL)reportAll OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AppHarbrSdkDebug (SWIFT_EXTENSION(AppHarbrSDK))
/// Will block all domains for testing, it will happen
/// only if debug flag is also true
- (AppHarbrSdkDebug * _Nonnull)withBlockAllWithBlockAll:(BOOL)blockAll SWIFT_WARN_UNUSED_RESULT;
/// Will report all domains for testing, it will happen
/// only if debug flag is also true
/// When blockAll flag is on aside to reportAll, the ads will be blocked
- (AppHarbrSdkDebug * _Nonnull)withReportAllWithReportAll:(BOOL)reportAll SWIFT_WARN_UNUSED_RESULT;
/// List of domains to report on when an Ad using them
- (AppHarbrSdkDebug * _Nonnull)withBlockDomainsWithBlockDomains:(NSArray<NSString *> * _Nonnull)blockDomains SWIFT_WARN_UNUSED_RESULT;
@end




typedef SWIFT_ENUM(NSInteger, VerificationStatus, open) {
  VerificationStatusWaitForDiagnosing = 0,
  VerificationStatusDoNotWait = 1,
};





#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
